generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  email         String            @unique
  name          String?
  createdAt     DateTime          @default(now())
  emailVerified DateTime?
  image         String?
  updatedAt     DateTime          @updatedAt
  role          UserRole          @default(CLIENT)
  accounts      Account[]
  barbershops   BarbershopAdmin[]
  bookings      Booking[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Barbershop {
  id                String              @id @default(uuid())
  name              String
  address           String
  phones            String[]
  description       String
  imageUrl          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?
  barbersCount      Int                 @default(1)
  maxClientsPerSlot Int                 @default(1)
  admins            BarbershopAdmin[]
  services          BarbershopService[]
  bookings          Booking[]
}

model BarbershopAdmin {
  id           String     @id @default(uuid())
  userId       String
  barbershopId String
  role         String     @default("admin")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, barbershopId])
}

model BarbershopService {
  id           String     @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal    @db.Decimal(10, 2)
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookings     Booking[]
}

model Booking {
  id           String            @id @default(uuid())
  userId       String
  serviceId    String
  date         DateTime
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  barbershopId String?
  barbershop   Barbershop?       @relation(fields: [barbershopId], references: [id])
  service      BarbershopService @relation(fields: [serviceId], references: [id])
  user         User              @relation(fields: [userId], references: [id])
}

enum UserRole {
  CLIENT
  BARBERSHOP_ADMIN
  SUPER_ADMIN
}
